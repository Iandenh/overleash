package server

import (
    "time"
    "github.com/Iandenh/overleash/internal/version"
	"github.com/Iandenh/overleash/overleash"
    "strconv"
    "strings"
)

templ layout(name string, colorScheme string) {
    <!doctype html>
	<html lang="en" data-theme={colorScheme}>
		<head>
            <meta charset="utf-8" />
            <title>{ name }</title>
            <script src="/static/htmx.2.0.4.min.js" defer></script>
            <link href={"/static/style.css?version="+version.Version} rel="stylesheet" />
            <link rel="icon" href={"/static/overleash.svg?version="+version.Version} />
            <script src={"/static/overleash.js?version="+version.Version} defer></script>
		</head>
		<body>
			<main>
				{ children... }
			</main>

            @help()
		</body>
	</html>
}

templ featureTemplate(list featureList, o *overleash.OverleashContext) {
    <div class="features" id="flags">
        <div class="feature-bar">
            <div class="feature-count">
                if len(list.flags) == list.totalFlags {
                    Showing <strong>{ strconv.Itoa(len(list.flags)) }</strong> flags
                } else {
                    Showing <strong>{ strconv.Itoa(len(list.flags)) }</strong> of <strong>{ strconv.Itoa(list.totalFlags) }</strong> flags
                }
            </div>
        </div>

        <div class="feature-container">
            for _, flag := range list.flags {
                <div class="card flag">
                    @feature(flag, o, false)
                </div>
            }

            if len(list.flags) == 0 && list.totalFlags > 0 {
                <div class="striped-card">
                    if strings.TrimSpace(list.searchTerm) == "" {
                        <div class="empty-state">No results found</div>
                    } else {
                       <div class="empty-state">No results for “<strong>{list.searchTerm}</strong>”</div>
                    }
                </div>
            }
        </div>
    </div>
}

templ feature(flag overleash.Feature, o *overleash.OverleashContext, showDetail bool) {
    <div class="flag-name">
        <div class="key">
            if flag.SearchTerm != "" {
                @templ.Raw(flag.SearchTerm)
            } else {
                { flag.Name }
            }
        </div>

        if *flag.Stale == true {
            <div class="stale-status">Stale</div>
        }
    </div>

    if flag.Description != "" {
        <div class="description">
            @templ.Raw(renderJiraLink(flag.Description))
        </div>
    }

    <div class="separator"></div>

    <div class="current-status">
        <div>
            <span class="label">Feature flag:</span>
            <span class="text">
                 if o.RemoteFeatureFile().FeatureFlagEnabled(flag.Name) {
                    enabled
                 } else {
                    disabled
                 }
            </span>
        </div>

        if !showDetail {
            for _, status := range o.RemoteFeatureFile().FeatureFlagStatus(flag.Name) {
                <div>
                    <span class="label">{ status.Strategy }:</span>
                    <span class="text">{ status.Status }</span>
                </div>
            }
        }

        if showDetail {
            @featureDetail(flag.Strategies, o.FeatureFile().SegmentsMap())
        }
    </div>

    <div class="action">
        <button class="btn black" hx-post={"/override/" + flag.Name + "/true"} hx-target="closest .flag" hx-swap="innerHTML" hx-trigger="click, enable-flag from:closest .flag">Enable <span class="shortcuts">(e)</span></button>
        <button class="btn white" hx-post={"/override/" + flag.Name + "/false"} hx-target="closest .flag" hx-swap="innerHTML" hx-trigger="click, disable-flag from:closest .flag">Disable <span class="shortcuts">(d)</span></button>

        if showDetail {
           <button class="list muted" hx-get={"/dashboard/feature/" + flag.Name} hx-target="closest .flag" hx-swap="innerHTML" hx-trigger="click, toggle-detail from:closest .flag"></button>
        } else {
            <button class="list" hx-get={"/dashboard/feature/" + flag.Name + "?details=true"} hx-target="closest .flag" hx-swap="innerHTML" hx-trigger="click, toggle-detail from:closest .flag"></button>
        }
    </div>

     if ok, status := o.HasOverride(flag.Name); ok == true {
        <div class={"override", templ.KV("enabled", status), templ.KV("paused", o.IsPaused()), templ.KV("disabled", !status)}>
            <div>
            if o.IsPaused() {
                Override <strong>paused</strong>:
            } else {
                Override active:
            }
            if status && o.GetOverride(flag.Name).IsGlobal {
                <div class="status">Enabled</div>
            } else if status {
                <div class="status">Enabled with constraints</div>
            } else {
                <div class="status">Disabled</div>
            }
            </div>

            <button class="btn white" hx-delete={"/override/" + flag.Name} hx-target="closest .flag" hx-swap="innerHTML" hx-trigger="click, remove-flag from:closest .flag">Remove Override <span class="shortcuts">(q)</span></button>
        </div>
     }
}

templ remoteSelector(o *overleash.OverleashContext) {
    if len(o.GetRemotes()) != 1 {
        <select name="remote"
                class="remote-select"
                autocomplete="off"
                hx-trigger="input changed, remote"
                hx-post="/dashboard/changeRemote"
                hx-swap="innerHTML"
                hx-target="body">
            for idx, remote := range o.GetRemotes() {
                <option value={ strconv.Itoa(idx) }
                 if idx == o.FeatureFileIdx() {
                      selected="selected"
                 }
                >{ remote }</option>
            }
        </select>
    }
}

templ features(list featureList, o *overleash.OverleashContext, colorScheme string) {
	@layout("Overleash", colorScheme) {
	    @header()
	    <div class="heading">
            <div class="container">
                <div class="head">
                    <div class="actions">
                        <button class="btn small black" hx-delete={"/"} hx-swap="innerHTML" hx-target="body">Remove all overrides</button>
                        if o.IsPaused() {
                            <button class="btn small white pause-btn" hx-post={"/dashboard/unpause"} hx-swap="innerHTML" hx-target="body" hx-trigger="click, toggle-pause">Unpause overrides</button>
                        } else {
                           <button class="btn small white pause-btn" hx-post={"/dashboard/pause"} hx-swap="innerHTML" hx-target="body" hx-trigger="click, toggle-pause">Pause overrides</button>
                        }
                        @remoteSelector(o)
                    </div>
                    <div class="sync">
                        @lastSync(o.LastSync())
                        <button class="sync-btn" hx-post={"/dashboard/refresh"} hx-swap="innerHTML" hx-target="body" hx-trigger="click, refresh"><img src="/static/icons/sync.svg" alt="Sync" /></button>
                    </div>
                </div>

                <div class="search-container">
                    <div class="search">
                        <input class="input" type="search"
                               name="search" placeholder="Begin Typing To Search Feature Flags..."
                               autocomplete="off"
                               autofocus
                               value={list.searchTerm}
                               hx-post="/dashboard/search"
                               hx-trigger="input changed delay:100ms, search"
                               hx-target=".features"
                               hx-swap="outerHTML" />
                    </div>

                    <div class="feature-filter">
            <details class="select-menu" name="search-filter">
                <summary>
                    <div>
                        if list.isSelected("sort", "") {
                                Sort <span class="dropdown-caret"></span>
                        } else if list.isSelected("sort", "name-asc") {
                                Sort: <span class="way">Ascending</span> <span class="dropdown-caret"></span>
                        } else {
                                Sort: <span class="way">Descending</span> <span class="dropdown-caret"></span>
                        }
                    </div>
                </summary>
                <article>
                <div class="select-menu-modal">
                    <div class="select-menu-list">
                        <a
                            class={"select-menu-item", templ.KV("select-menu-selected", list.isSelected("sort", ""))}
                            href={templ.URL(list.generateUrl("sort", ""))}
                            hx-get={list.generateUrl("sort", "")}
                            hx-swap="innerHTML"
                            hx-target="body">Default</a>
                        <a
                            class={"select-menu-item", templ.KV("select-menu-selected", list.isSelected("sort", "name-asc"))}
                            href={templ.URL(list.generateUrl("sort", "name-asc"))}
                            hx-get={list.generateUrl("sort", "name-asc")}
                            hx-swap="innerHTML"
                            hx-target="body">Alphabetic ascending</a>

                        <a
                            class={"select-menu-item", templ.KV("select-menu-selected", list.isSelected("sort", "name-desc"))}
                            href={templ.URL(list.generateUrl("sort", "name-desc"))}
                            hx-get={list.generateUrl("sort", "name-desc")}
                            hx-swap="innerHTML"
                            hx-target="body">Alphabetic descending</a>
                    </div>
                </div>
                </article>
            </details>


            <details class="select-menu" name="search-filter">
                <summary>
                    <div>
                        if list.isSelected("filter", "") {
                                Filter <span class="dropdown-caret"></span>
                        } else if list.isSelected("filter", "overridden") {
                                Filter: <span class="way">Only overridden</span> <span class="dropdown-caret"></span>
                        } else {
                                Filter: <span class="way">Not overridden</span> <span class="dropdown-caret"></span>
                        }
                    </div>
                </summary>

                    <article>
                        <div class="select-menu-modal">
                            <div class="select-menu-list">
                            <a
                                class={"select-menu-item", templ.KV("select-menu-selected", list.isSelected("filter", ""))}
                                href={templ.URL(list.generateUrl("filter", ""))}
                                hx-get={list.generateUrl("filter", "")}
                                hx-params="*"
                                hx-swap="innerHTML"
                                hx-target="body">Show all</a>

                            <a
                                class={"select-menu-item", templ.KV("select-menu-selected", list.isSelected("filter", "overridden"))}
                                href={templ.URL(list.generateUrl("filter", "overridden"))}
                                hx-get={list.generateUrl("filter", "overridden")}
                                hx-swap="innerHTML"
                                hx-target="body">Only overridden</a>

                            <a
                                class={"select-menu-item", templ.KV("select-menu-selected", list.isSelected("filter", "not-overridden"))}
                                href={templ.URL(list.generateUrl("filter", "not-overridden"))}
                                hx-get={list.generateUrl("filter", "not-overridden")}
                                hx-params="*"
                                hx-swap="innerHTML"
                                hx-target="body">Not overridden</a>
                            </div>
                        </div>
                    </article>
                </details>
            </div>
                </div>

            </div>
		</div>

	    <div class="container">
		    @featureTemplate(list, o)
        </div>
	}
}

templ featureDetail(strategies []overleash.Strategy, segments map[int][]overleash.Constraint) {
        <div class="detail-container">
         for _, strategy := range strategies {
            <div class="strategy">
                <div class="title">{ overleash.ToStrategyName(strategy) }</div>
                for _, constraint := range constraintsOfStrategy(strategy, segments) {
                    <div class="constraint">
                        <div class={"name", templ.KV("inverted", constraint.Inverted)}>
                            { constraint.ContextName }
                            if constraint.Inverted {
                                 <span class="inverted"><strong>NOT</strong></span>
                            }
                        </div>
                        <div class="operator">{ string(constraint.Operator) }</div>

                        if len(constraint.Values) > 0 {
                            <div class="values" title={strings.Join(constraint.Values, ", ")}>
                                {strings.Join(constraint.Values, ", ")}
                            </div>
                        } else {
                            <div class="value">
                                {constraint.Value}
                            </div>
                        }
                    </div>
                }
                <div class="constraint verdict">
                    @templ.Raw(overleash.ToLabelText(strategy))
                </div>
            </div>
        }
        </div>
}


templ lastSync(t time.Time) {
    <span hx-get="/dashboard/lastSync" hx-trigger="every 15s" id="last-sync" hx-swap="outerHTML">Last sync: <strong>{ t.Format("15:04:05") }</strong></span>
}

templ help() {
    <dialog id="help-dialog">
        <div class="help">

            <div class="kbd-shortcuts">
                for _, shortcut := range getShortcuts() {
                    <div class="kbd-shortcut">
                        <div class="keys">
                            if shortcut.alt {
                                <kbd>Alt</kbd> +
                            }
                            <kbd>{ shortcut.character }</kbd>
                        </div>
                        <div class="action">
                            { shortcut.description }
                        </div>
                    </div>
                }
            </div>
            <div class="version">
                {getVersion()}
            </div>

            <button class="btn black">Close</button>
        </div>
    </dialog>
}

templ header() {
    <header>
        <div class="header">
            <div><img class="logo" src="/static/overleash.svg"/></div>

            <div class="header-actions">
                <div class="header-action">
                    <button class="theme-btn">
                        <img class="auto" src="/static/icons/auto.svg"/>
                        <img class="light" src="/static/icons/light.svg"/>
                        <img class="dark" src="/static/icons/dark.svg"/>
                    </button>
                </div>

                 <div class="header-action">
                    <div class="separator"></div>
                 </div>

                 <div class="header-action">
                    <button class="search-btn">
                        <img src="/static/icons/help.svg"/>
                    </button>
                </div>
            </div>
        </div>
    </header>
}